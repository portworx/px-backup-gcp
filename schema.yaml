applicationApiVersion: v1beta1
x-google-marketplace:
  # MUST be v2.
  schemaVersion: v2

  # MUST match the version of the Application custom resource object.
  # This is the same as the top level applicationApiVersion field in v1.
  applicationApiVersion: v1beta1

  # The release version is required in the schema and MUST match the
  # release tag on the the deployer.
  publishedVersion: '2.5.0-dev'
  publishedVersionMetadata:
    releaseNote: >-
      Release notes can be found here: https://docs.portworx.com/reference/release-notes/portworx/#2-7-2-1
    # releaseTypes list is optional.
    releaseTypes:
    - Feature
    - BugFix
    # If recommend is true, users using older releases are encouraged
    # to update as soon as possible. Useful if, for example, this release
    # fixes a critical issue.
    recommended: true

  # This MUST be specified to indicate that the deployer supports managed updates.
  # Note that this could be left out or kalmSupported set to false, in
  # which case the deployer uses schema v2 but does not support update.
  managedUpdates:
    kalmSupported: true

  # Image declaration is required here.
  images:
    # PX-CENTRAL
    pxcentral-onprem-api:
      properties:
        images.pxcentralApiServerImage.registry:
          type: REGISTRY
        images.pxcentralApiServerImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.pxcentralApiServerImage.tag: 
          type: TAG
    pxcentral-onprem-ui-frontend:
      properties:
        images.pxcentralFrontendImage.registry:
          type: REGISTRY
        images.pxcentralFrontendImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.pxcentralFrontendImage.tag: 
          type: TAG
    pxcentral-onprem-ui-backend:
      properties:
        images.pxcentralBackendImage.registry:
          type: REGISTRY
        images.pxcentralBackendImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.pxcentralBackendImage.tag: 
          type: TAG
    pxcentral-onprem-ui-lhbackend:
      properties:
        images.pxcentralMiddlewareImage.registry:
          type: REGISTRY
        images.pxcentralMiddlewareImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.pxcentralMiddlewareImage.tag: 
          type: TAG
    pxcentral-onprem-post-setup:
      properties:
        images.postInstallSetupImage.registry:
          type: REGISTRY
        images.postInstallSetupImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.postInstallSetupImage.tag: 
          type: TAG
    postgresql:
      properties:
        images.keycloakBackendImage.registry:
          type: REGISTRY
        images.keycloakBackendImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.keycloakBackendImage.tag: 
          type: TAG
    keycloak:
      properties:
        images.keycloakFrontendImage.registry:
          type: REGISTRY
        images.keycloakFrontendImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.keycloakFrontendImage.tag: 
          type: TAG
    keycloak-login-theme:
      properties:
        images.keycloakLoginThemeImage.registry:
          type: REGISTRY
        images.keycloakLoginThemeImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.keycloakLoginThemeImage.tag: 
          type: TAG
    busybox:
      properties:
        images.keycloakInitContainerImage.registry:
          type: REGISTRY
        images.keycloakInitContainerImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.keycloakInitContainerImage.tag: 
          type: TAG
    mysql:
      properties:
        images.mysqlImage.registry:
          type: REGISTRY
        images.mysqlImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.mysqlImage.tag: 
          type: TAG

    ## Images required for enabling px-backup
    px-backup:
      properties:
        images.pxBackupImage.registry:
          type: REGISTRY
        images.pxBackupImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.pxBackupImage.tag: 
          type: TAG
    mongodb:
      properties:
        images.mongodbImage.registry:
          type: REGISTRY
        images.mongodbImage.repo:
          type: REPO_WITHOUT_REGISTRY
        images.mongodbImage.tag: 
          type: TAG
    
    
  deployerServiceAccount:
    description: >
      Creates app resources, including the MyAppCustomResource CRD.
    roles:
    - type: ClusterRole
      rulesType: CUSTOM
      rules:
      - apiGroups: ['rbac.authorization.k8s.io', "clusterroles.rbac.authorization.k8s.io"]
        resources: ['*']
        verbs: ["*"]

properties:
  name:
    type: string
    default: "portworx"
    x-google-marketplace:
      type: NAME
  namespace:
    type: string
    x-google-marketplace:
      type: NAMESPACE
  pxBackupServiceAccount:
    title: PX Backup Service Account
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      title: PX Backup Service Account
      serviceAccount:
        description: Service account to assign to Portworx Operator
        roles:
        - type: ClusterRole
          rulesType: CUSTOM
          rules:
          - apiGroups: ['*']
            resources: ['*']
            verbs: ['create','get','update','patch','delete','list','watch','deletecollection','use','impersonate','bind','escalate']
  reportingSecret:
    type: string
    x-google-marketplace:
      type: REPORTING_SECRET
  
  # persistentStorage
  persistentStorage.storageClassName:
    title: Storage Class Name
    description: Provide storage class name which exists on the cluster, for anthos please refer https://backup.docs.portworx.com/
    type: string
    default: "standard"

required:
- name
- namespace
- persistentStorage.storageClassName